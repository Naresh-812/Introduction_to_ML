# -*- coding: utf-8 -*-
"""K-Means.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17sVQ2DmNakrMJn-uDzEJZJwB-hj9w7_0
"""

#k-means alogorith for 1d for 2 clusters
import numpy as np
data=np.array([2,3,4,10,11,12,20,25,30])
k=2#no of clusters
#initial centriodseeeeeeeeeeeeee
m1=data[0]
m2=data[-1]
c1_mean=0
c2_mean=0
while True:
#for calaculating distance and divinding clusters
  abs_dist1=np.abs(data-m1)
  abs_dist2=np.abs(data-m2)

  c1=[]
  c2=[]
  for i in range(len(data)):
    if abs_dist1[i]<abs_dist2[i]:#decideing which cluster it has to belongs
      c1.append(data[i])

    else:
      c2.append(data[i])

  c2=np.array(c2)

  c1=np.array(c1)
  c1_mean=c1.mean()
  c2_mean=c2.mean()
  if c1_mean==m1 and c2_mean==m2:
    print("done")
    break
  else:
    m1=c1_mean
    m2=c2_mean

print("cluster1=",c1)
print("cluster2=",c2)
print("m1=",m1)
print("m2=",m2)

#k means for 2D arrays
import numpy as np
import matplotlib.pyplot as plt
data=np.array([[2,3],[5,6],[8,7],[1,4],[2,2],[6,7],[3,4],[8,6]])
m1=data[0]
m2=data[3]

while True:
  cl_1=[]
  cl_2=[]
  diff1=data-m1
  diff2=data-m2
  dist1=np.sqrt(np.sum(diff1**2,axis=1))
  dist2=np.sqrt(np.sum(diff2**2,axis=1))
  for i in range(len(data)):
    if dist1[i]<dist2[i]:
      cl_1.append(data[i])
    else:
      cl_2.append(data[i])
  cl_1=np.array(cl_1)
  print("one cluster=",cl_1)
  print("end")
  cl_2=np.array(cl_2)
  print("another cluster",cl_2)
  print("end")
  c1_mean=np.mean(cl_1,axis=0)
  print("c1 mean",c1_mean)
  c2_mean=np.mean(cl_2,axis=0)
  print("c2 mean",c2_mean)
  print("iteration completed")
  if np.array_equal(c1_mean, m1) and np.array_equal(c2_mean, m2):

    print("done")
    break
  else:
    m1=c1_mean
    m2=c2_mean

